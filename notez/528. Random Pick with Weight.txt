528. Random Pick with Weight
You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.

You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).

For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
 

Example 1:

Input
["Solution","pickIndex"]
[[[1]],[]]
Output
[null,0]

Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.
Example 2:

Input
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]

Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.

Since this is a randomization problem, multiple answers are allowed.
All of the following outputs can be considered correct:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.
 

Constraints:

1 <= w.length <= 104
1 <= w[i] <= 105
pickIndex will be called at most 104 times.


---THOUGHTS---
at first glance I dont really know where to begin initially I can tell I need to create a function hat will pick an index randomly so that mkes me think I need to ref the index and just use some python method the randomin the index Im reffering too but as far as actually effecting the probability of what I choose im not sure how to adjust that or if thats the key topic for this question

---SOLUTION---
From what I understand, this question asks us to return a random index from a given array, where the likelihood of each index being selected depends on the values in the array. Larger numbers in the array increase the weight and thus give those indexes a higher chance of being selected.

The solution to this problem is to generate a cumulative sum of the array and then divide each element by that total sum. First, we initialize the solution class and set the properties based on the given array. This involves creating self.w, which holds the cumulative sum array, and self.total, which holds the total sum of the array. In a loop, we iterate through the given array, adding each number to the cumulative sum to get the total. Then, we store the original number in the array, and initialize self.total so it can be referenced later.

Next, we create a method in the solution class called pickIndex. This method contains the logic for selecting an index. Here, we initialize a random number, using Python's random.randint method, and generate a random number in the range of 1 to n (where n is the total sum of the array).

last par we use a binary search to get the index a lot quicker by dividng the list in half to find the first index i such that self.w[i] is greater than or equal to r_num.

---BIGO---
__init__: O(n) for building the cumulative sum array.
pickIndex: O(log n) for performing a binary search to select an index based on the random number.
Space Complexity: O(n) because we store the cumulative sum array.
